# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# This is the configuration file for testgen
# User Help: 
# Please fill-in the options as needed then run ./testgen.sh [yourConfigurationFile.ini]
# Keep the comments on seperate lines from values. Order of parameters does not matter, but section headers are required.
# Parameters names are case sensitive.
# For bool types, you can use 0/1, False/True, Yes/No [Case insensitive].
# ----Developer Help:
# To add a new configuration parameter, please edit "scripts/configData.json" with the 
# description, type, and limits of the argument.
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Testgen environment
[testgenBackend]
vulClasses = [bufferErrors, PPAC, informationLeakage, numericErrors]
# List the vulClasses you need testgen to execute
backend = fpga
# [ qemu | simulation (Verilator) | fpga ]
processor = chisel_p1
# [bluespec|chisel + _ + p1|p2|p3]
# Choose from: [bufferErrors, PPAC, resourceManagement, codeInjection, informationLeakage, cryptoErrors, numericErrors]
pocExploitsMode = Yes
# run the POC exploits instead of the evaluation tests
#------------
#List the specific pocs to run. You can use the keyword "all" to do all pocs within <NotImplemented>
#--------------------------------------------------------------------------------
debugMode = Yes
# Debug Mode has a different interpretation depending on the backend choice [boolean]
#--------------------------------------------------------------------------------
# EMULATION OPTIONS -------------------------------------------------------------
osImage = debian
# [ debian | FreeRTOS | busybox | FreeBSD ]
FreeRTOStimeout = 10
# The FreeRTOS execution requires a timeout. 10 seconds is a reasonable value.
osUseNixImages = Yes
# Use os images from Nix instead of building them
overwriteOsImage = No
#This is a DANGEROUS option. Will skip building the OS image(s) if it is <No>. Please use carefully. (assuming Nix option is Off)
qemuNtkPortRangeStart = 5000
qemuNtkPortRangeEnd = 6000
#Which network port to use for qemu. It needs 2 open ports. It will search starting at the provided 
#start value until the end value.
#--------------------------------------------------------------------------------
# SIMULATION OPTIONS ------------------------------------------------------------
simulationTimeout = 7
# Simulator timeout in seconds (use >10 for bluespec for more meaningful results)
simUseNixBinaries = Yes
# Use elftohex + exe_HW simulation binaries from Nix instead of building them
overwriteSimulatorBin = No
# If the simulator & elf_to_hex were already built before, do we overwrite it? (assuming Nix option is Off)
#--------------------------------------------------------------------------------
#--------------------------------------------------------------------------------
# Vul Class #1: Buffer Errors
[bufferErrors]
compiler = baselineXcompile
#choose the compiler. 'qemu' spawns a qemu instance to compile the test. 'baselineXcompile' is the baseline toolchain.
runAllTests = Yes
# If disabled, then the file testgen/1_BufferErrors/configCWEs.ini will be used to custom configure the tests
nTests = 25
# The number of random tests generated [int>0]
useSeed = No
# Whether to use a specific seed (instead of a random one)
seed = 0
# The seed for the random generation (if useSeed is enabled)
csvFile = Yes
# tabulates the test results in a CSV file [boolean]
dashboardImage = No
# plots an image of the test results
#--------------------------------------------------------------------------------
# POC Exploits OPTIONS ----------------------------------------------------------
# -----Developer help: 
# use "poc_fileName" as a prefix to every configurable parameter
# and include "testgen4poc.h" in your C file
poc_heartbleed_real_payload_len = 2
poc_heartbleed_nominal_payload_len = 20
#heartbleed options
#--------------------------------------------------------------------------------
#--------------------------------------------------------------------------------
# Vul Class #2: Permission, Privileges and Access Control
[PPAC]
compiler = qemu
#choose the compiler. 'qemu' spawns a qemu instance to compile the test. 'baselineXcompile' is the baseline toolchain.
runAllTests = Yes
# If disabled, then the file testgen/2_PPAC/configCWEs.ini will be used to custom configure the tests
randomizeParameters = No
# If turned on, all parameters starting with the prefix "test_" will be ignored and randomized instead
test_nAllowedAuthAttempts = 3
# for TEST-307: Allowed number of authentication attempts. 10 is an arbitrary limit.
test_nAllowedInteractions = 3
# for TEST-799: Allowed numer of interactions. Note that 9 is a rigid limit (/proc/sys/fs/mqueue/msg_max) to allow +1 breach attempt
# POC Exploits OPTIONS ----------------------------------------------------------
poc_dictionaryAttack_rootPassword = Besspin
# the root password. Should choose a valid star wars planet from (./poc-exploits/2_PPAC/dictionaryAttack/starWarsPlanets.dict), otherwise, the exploit would be meaningless.
poc_dictionaryAttack_usePamTally = No
# If enabled, pam_tally2 is gonna be used which makes the OS secure and blocks the breach.
#--------------------------------------------------------------------------------
#--------------------------------------------------------------------------------
# Vul Class #3: Resource Management
[resourceManagement]
compiler = qemu
#choose the compiler. 'qemu' spawns a qemu instance to compile the test. 'baselineXcompile' is the baseline toolchain.
runAllTests = Yes
# If disabled, then the file testgen/3_ResourceManagement/configCWEs.ini will be used to custom configure the tests
randomizeParameters = No
# If turned on, all parameters starting with the prefix "test_" will be ignored and randomized instead
test_nResourceLimit = 10 
# for test CWE-772: Allowed number of file descriptors per user. (From 5 to 100).

#--------------------------------------------------------------------------------
#--------------------------------------------------------------------------------
# Vul Class #4: Code Injection
[codeInjection]
compiler = qemu
#choose the compiler. 'qemu' spawns a qemu instance to compile the test. 'baselineXcompile' is the baseline toolchain.
runAllTests = Yes
# If disabled, then the file testgen/4_codeInjection/configCWEs.ini will be used to custom configure the tests

#--------------------------------------------------------------------------------
#--------------------------------------------------------------------------------
# Vul Class #5: Information Leakage
[informationLeakage]
compiler = qemu
#choose the compiler. 'qemu' spawns a qemu instance to compile the test. 'baselineXcompile' is the baseline toolchain.
runAllTests = No
# If enabled, ALL tests will be run in all configurations (even if no weakness exists). 
# The default configCWEs.ini exposes all tests.

# POC Exploits OPTIONS ----------------------------------------------------------
# -----Developer help: 
# use "poc_fileName" as a prefix to every configurable parameter
# and include "testgen4poc.h" in your C file
poc_paddingLeakage_secret = 0x1A2B3C4D

#--------------------------------------------------------------------------------
#--------------------------------------------------------------------------------
# Vul Class #6: Crypto Errors
[cryptoErrors]
compiler = qemu
#choose the compiler. 'qemu' spawns a qemu instance to compile the test. 'baselineXcompile' is the baseline toolchain.
runAllTests = Yes
# If disabled, then the file testgen/6_cryptoErrors/configCWEs.ini will be used to custom configure the tests

#--------------------------------------------------------------------------------
#--------------------------------------------------------------------------------
# Vul Class #7: Numeric Errors
[numericErrors]
compiler = qemu
#choose the compiler. 'qemu' spawns a qemu instance to compile the test. 'baselineXcompile' is the baseline toolchain.
runAllTests = Yes
# If disabled, then the file testgen/5_NumericErrors/configCWEs.ini will be used to custom configure the tests

#--------------------------------------------------------------------------------


 
