# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# This is the configuration file for testgen
# User Help: 
# Please fill-in the options as needed then run ./testgen.sh [yourConfigurationFile.ini]
# Keep the comments on seperate lines from values. Order of parameters does not matter, but section headers are required.
# Parameters names are case sensitive.
# For bool types, you can use 0/1, False/True, Yes/No [Case insensitive].
# -------Developer Help:
# - To add a new configuration parameter, please edit "scripts/configData.json" with the 
# description, type, and limits of the argument.
# - Any parameter starting with the prefix test_ will be available for the tests of that class.
# - Any parameter starting with the prefix poc_ will be available for the pocs of that class. 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# Testgen global environment
[testgenBackend]
vulClasses = [bufferErrors, informationLeakage, numericErrors]
# List the vulClasses you need testgen to execute
# Choose from: [bufferErrors, PPAC, resourceManagement, codeInjection, informationLeakage, cryptoErrors, numericErrors]
backend = qemu
# [ qemu | simulation (Verilator) | fpga ]
processor = chisel_p1
# [bluespec|chisel + _ + p1|p2|p3]
osImage = FreeRTOS
# [ debian | FreeRTOS | busybox | FreeBSD ]
useCustomCompiling = No
# Use the settings in the [customizedCompiling] section below. More info are provided in the readme.
useCustomScoring = No
# Use the settings in the [customizedScoring] section below. More info are provided in the readme.
debugMode = No
# Debug Mode has a different interpretation depending on the backend choice [boolean]
pocExploitsMode = Yes
# run the POC exploits instead of the evaluation tests
#--------- TBD: List the specific pocs to run. You can use the keyword "all" to do all pocs within <NotImplemented>
#--------------------------------------------------------------------------------
# EMULATION OPTIONS -------------------------------------------------------------
FreeRTOStimeout = 10
# The FreeRTOS execution requires a timeout. 10 seconds is a reasonable value.
osImageSource = nix
# Source of the OS image: either 'nix', or 'cache'. Cache is the local directory "./osImages". 
# For cache, image name has to follow the pattern: {osImage}{backend^}.elf. For example, 'debianFpga.elf' or 'FreeBSDFpga.elf'.
qemuNtkPortRangeStart = 5000
qemuNtkPortRangeEnd = 6000
#Which network port to use for qemu. It needs 2 open ports. It will search starting at the provided 
#start value until the end value.
#--------------------------------------------------------------------------------
# SIMULATION OPTIONS ------------------------------------------------------------
simulationTimeout = 7
# Simulator timeout in seconds (use >10 for bluespec for more meaningful results)
simUseNixBinaries = Yes
# Use elftohex + exe_HW simulation binaries from Nix instead of building them
overwriteSimulatorBin = No
# If the simulator & elf_to_hex were already built before, do we overwrite it? (assuming Nix option is Off)
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Compiling Environment -- to be customized for secure processors -- check the readme for more details
# If this section is enabled by 'useCustomCompiling', the vulClass-specific 'compiler' setting will be ignored.
[customizedCompiling]
compilingEnvironment = xCompile
# Chooses either 'xCompile' for cross compiling, or 'qemu' for compiling inside a qemu instance
useCustomExecutable = No
# Use a custom executable script that will handle the compiling. This has a higher priority over the makefile option below.
pathToCustomExecutable = /path/to/executable/script
# The path to the executable script. It will be passed: 1. the directory where the C files are. 2. The vulClass name.
useCustomMakefile = No
# Use a custom Makefile. This makefile will be copied to the tests directory as 'Makefile', and be executed by 'make'.
pathToCustomMakefile = /path/to/Makefile
# The path to the custom makefile. 
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Scoring Environment -- to be customized for secure processors -- check the readme for more details
[customizedScoring]
stdoutKeywords = []
# List of keywords (comma separated, white spaces) in stdout that means that the processor has detected a violation.
gdbKeywords = []
# List of keywords (comma separated, white spaces) in GDB output that means that the processor has detected a violation.
funcCheckpoints = []
# List of functions/methods/interrupts (comma separated, white spaces) reaching which means that the processor has detected a violation.
memAddress = -1
# The memory address to watch for detected violations. use -1 to disable.
memResetValue = 0
# The value (HEX) to which testgen should reset the memAddress after a violation detection.
memViolationValues = []
# List of values (HEX, comma separated) that indicate that a violation was detected. For example: [0x539, FFF, 1]
# You may use [*] to indicate the use of every value except memResetValue. 
useCustomFunction = No
# Use a custom python script whose main will score instead of the settings above.
pathToCustomFunction = /path/to/python/function
# The path to the python script. It will be passed: 1. A list of the lines from the log file. 2. The Enum object SCORES. 
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Vul Class #1: Buffer Errors
[bufferErrors]
compiler = baselineXcompile
# Choose the compiler if 'useCustomCompiling' is turned off. 
# 'qemu' spawns a qemu instance to compile the test. 'baselineXcompile' is the baseline toolchain.
runAllTests = Yes
# If disabled, then the file testgen/1_BufferErrors/configCWEs.ini will be used to custom configure the tests
nTests    = 25
# The number of random tests generated [int>0]
nSkip     = 0
# Before generating `nTests` tests, generate and throw away `nSkip` tests
useSeed   = No
# Whether to use a specific seed (instead of a random one)
seed      = 0
# The seed for the random generation (if useSeed is enabled)
heapSize  = 8M
stackSize = 8K
# Maximum heap and stack sizes. Understands suffixes K=1024, M=1024^2
csvFile = Yes
# tabulates the test results in a CSV file [boolean]
dashboardImage = No
# plots an image of the test results
# POC Exploits OPTIONS ----------------------------------------------------------
poc_heartbleed_real_payload_len = 2
poc_heartbleed_nominal_payload_len = 20
#heartbleed options
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Vul Class #2: Permission, Privileges and Access Control
[PPAC]
compiler = qemu
# Choose the compiler if 'useCustomCompiling' is turned off. 
# 'qemu' spawns a qemu instance to compile the test. 'baselineXcompile' is the baseline toolchain.
runAllTests = Yes
# If disabled, then the file testgen/2_PPAC/configCWEs.ini will be used to custom configure the tests
randomizeParameters = No
# If turned on, all parameters starting with the prefix "test_" will be ignored and randomized instead
test_nAllowedAuthAttempts = 3
# for TEST-307: Allowed number of authentication attempts. 10 is an arbitrary limit.
test_nAllowedInteractions = 3
# for TEST-799: Allowed numer of interactions. Note that 9 is a rigid limit (/proc/sys/fs/mqueue/msg_max) to allow +1 breach attempt
# POC Exploits OPTIONS ----------------------------------------------------------
poc_dictionaryAttack_rootPassword = Besspin
# the root password. Should choose a valid star wars planet from (./poc-exploits/2_PPAC/dictionaryAttack/starWarsPlanets.dict), otherwise, the exploit would be meaningless.
poc_dictionaryAttack_usePamTally = No
# If enabled, pam_tally2 is gonna be used which makes the OS secure and blocks the breach.
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Vul Class #3: Resource Management
[resourceManagement]
compiler = qemu
# Choose the compiler if 'useCustomCompiling' is turned off. 
# 'qemu' spawns a qemu instance to compile the test. 'baselineXcompile' is the baseline toolchain.
runAllTests = Yes
# If disabled, then the file testgen/3_ResourceManagement/configCWEs.ini will be used to custom configure the tests
randomizeParameters = No
# If turned on, all parameters starting with the prefix "test_" will be ignored and randomized instead
test_nResourceLimit = 10 
# for test CWE-772: Allowed number of file descriptors per user. (From 5 to 100).
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Vul Class #4: Code Injection
[codeInjection]
compiler = qemu
# Choose the compiler if 'useCustomCompiling' is turned off. 
# 'qemu' spawns a qemu instance to compile the test. 'baselineXcompile' is the baseline toolchain.
runAllTests = Yes
# If disabled, then the file testgen/4_codeInjection/configCWEs.ini will be used to custom configure the tests
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Vul Class #5: Information Leakage
[informationLeakage]
compiler = qemu
# Choose the compiler if 'useCustomCompiling' is turned off. 
# 'qemu' spawns a qemu instance to compile the test. 'baselineXcompile' is the baseline toolchain.
runAllTests = No
# If disabled, then the file testgen/5_InformationLeakage/configCWEs.ini will be used to custom configure the tests
# POC Exploits OPTIONS ----------------------------------------------------------
poc_paddingLeakage_secret = 0x1A2B3C4D
# paddingLeakage option
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Vul Class #6: Crypto Errors
[cryptoErrors]
compiler = qemu
# Choose the compiler if 'useCustomCompiling' is turned off. 
# 'qemu' spawns a qemu instance to compile the test. 'baselineXcompile' is the baseline toolchain.
runAllTests = Yes
# If disabled, then the file testgen/6_cryptoErrors/configCWEs.ini will be used to custom configure the tests
#--------------------------------------------------------------------------------

#--------------------------------------------------------------------------------
# Vul Class #7: Numeric Errors
[numericErrors]
compiler = qemu
# Choose the compiler if 'useCustomCompiling' is turned off. 
# 'qemu' spawns a qemu instance to compile the test. 'baselineXcompile' is the baseline toolchain.
runAllTests = Yes
# If disabled, then the file testgen/7_NumericErrors/configCWEs.ini will be used to custom configure the tests
#--------------------------------------------------------------------------------


 
